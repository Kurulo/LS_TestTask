//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Input/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""PcMovementInput"",
            ""id"": ""1eacb242-1fa6-4691-920b-2326bf16f445"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""aede3c3c-95c5-457e-8b48-b6dc3f72bf19"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""295bc284-10ef-4412-bbf7-b19b1a23a14d"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""429c965d-9e34-47d8-9bcd-877059fe81e8"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""530d4034-dc07-40f2-829a-d2ab513f6ce1"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""c0f2e567-650a-4e54-9797-165a80371585"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""d14d3b9a-6481-47cb-9188-5f3f2b2a4b08"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""MobileMovementInput"",
            ""id"": ""4b19ebea-ba00-4710-9224-c61f17bbe870"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""ca1c0c66-576b-4bc3-a885-00a0d91d5b89"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9a829872-34f3-42ba-b2c7-71fb6ee51cb2"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""PC"",
            ""bindingGroup"": ""PC"",
            ""devices"": []
        }
    ]
}");
        // PcMovementInput
        m_PcMovementInput = asset.FindActionMap("PcMovementInput", throwIfNotFound: true);
        m_PcMovementInput_Movement = m_PcMovementInput.FindAction("Movement", throwIfNotFound: true);
        // MobileMovementInput
        m_MobileMovementInput = asset.FindActionMap("MobileMovementInput", throwIfNotFound: true);
        m_MobileMovementInput_Movement = m_MobileMovementInput.FindAction("Movement", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PcMovementInput
    private readonly InputActionMap m_PcMovementInput;
    private List<IPcMovementInputActions> m_PcMovementInputActionsCallbackInterfaces = new List<IPcMovementInputActions>();
    private readonly InputAction m_PcMovementInput_Movement;
    public struct PcMovementInputActions
    {
        private @PlayerInput m_Wrapper;
        public PcMovementInputActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_PcMovementInput_Movement;
        public InputActionMap Get() { return m_Wrapper.m_PcMovementInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PcMovementInputActions set) { return set.Get(); }
        public void AddCallbacks(IPcMovementInputActions instance)
        {
            if (instance == null || m_Wrapper.m_PcMovementInputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PcMovementInputActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
        }

        private void UnregisterCallbacks(IPcMovementInputActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
        }

        public void RemoveCallbacks(IPcMovementInputActions instance)
        {
            if (m_Wrapper.m_PcMovementInputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPcMovementInputActions instance)
        {
            foreach (var item in m_Wrapper.m_PcMovementInputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PcMovementInputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PcMovementInputActions @PcMovementInput => new PcMovementInputActions(this);

    // MobileMovementInput
    private readonly InputActionMap m_MobileMovementInput;
    private List<IMobileMovementInputActions> m_MobileMovementInputActionsCallbackInterfaces = new List<IMobileMovementInputActions>();
    private readonly InputAction m_MobileMovementInput_Movement;
    public struct MobileMovementInputActions
    {
        private @PlayerInput m_Wrapper;
        public MobileMovementInputActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_MobileMovementInput_Movement;
        public InputActionMap Get() { return m_Wrapper.m_MobileMovementInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MobileMovementInputActions set) { return set.Get(); }
        public void AddCallbacks(IMobileMovementInputActions instance)
        {
            if (instance == null || m_Wrapper.m_MobileMovementInputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MobileMovementInputActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
        }

        private void UnregisterCallbacks(IMobileMovementInputActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
        }

        public void RemoveCallbacks(IMobileMovementInputActions instance)
        {
            if (m_Wrapper.m_MobileMovementInputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMobileMovementInputActions instance)
        {
            foreach (var item in m_Wrapper.m_MobileMovementInputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MobileMovementInputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MobileMovementInputActions @MobileMovementInput => new MobileMovementInputActions(this);
    private int m_PCSchemeIndex = -1;
    public InputControlScheme PCScheme
    {
        get
        {
            if (m_PCSchemeIndex == -1) m_PCSchemeIndex = asset.FindControlSchemeIndex("PC");
            return asset.controlSchemes[m_PCSchemeIndex];
        }
    }
    public interface IPcMovementInputActions
    {
        void OnMovement(InputAction.CallbackContext context);
    }
    public interface IMobileMovementInputActions
    {
        void OnMovement(InputAction.CallbackContext context);
    }
}
